---
description:
globs:
alwaysApply: false
---
# Introduction
1. we have to make a simple web app which is bluetooth enables - for connecting the esp32 device

2. i want to make a system like this where:-
    a. first we can add classes in webpage(classname , starting rollnumber)
    b. we can add students to every class(rollnumebr(starts from staring rollnumber to that class and increment by one till we want ), name )
    c. after saving class and students
    d. give a option to check bluetooth devices
    e. then i can connect the esp32 via bluetooth
    f. if esp32 is connected first time to the webapp then give a button named sync data to esp32 - this button syncs the data of all the classes and students in every classes
    g. after sync data show data saved to esp32 in Json format
    h. i can now disconnect the bluetooth and take the attendence

3. esp32 workflow :-
    a. i can on and off the esp32 via button connected to battery - on/off will work via main powersupply button  (on/off button)  show -----  device is on---- in oled display
    b. after that - i can see the the classes in display (connected to esp32) - i can go up and down using 2 buttons (up button and down button )
    c. give a select button by which i can select the class
    d. after class selection show first student rollnumber, name, and mark ✅(P - present)	❌ (A- Absent)
    e. after marking first student auto increment to rollnumeber 2 and show same -rollnumber, name, and mark ✅(P - present)	❌ (A- Absent)
    f. after last rollnumber - esp32 will save this data and shows attendence is completed for this class - and autoshift user to the class selection screen
    g. if attendence taken of any class then show attendence is taken already
    h. if attendence is not taken to any class then we can take attendence
    i. edge case- while taking attendence if someone gets back in middle or divice gets off then dont save data to that class , user need to take attendence again

4. now its the crazyy time we are having :-
   a. in web app i can connect the esp32 via bluetooth
   b. i can see the avilbale storage and total storage of esp32 in webpage in nice ui
   c. i can see the data of classes(students attendence) collected by esp32 - i can see the classes which have attendence data , and classes which are empty doesn't having the attendance data
   d. by button save data to app - data will be saved to the database mongodb
   e. note:- we are not using the date and time of esp32 when attendence was taken actually  - rather than we are taking the date and time when user updates the data on web app
   f. ESP32 feature- after the data is saved successfully to webapp - mongodb , automatically delete the mark field of esp32- class- student-mark- P A , so we can take attendence again
   g. if todays attendence is saved in mongo db then teacher can only update next day attendendence in web app (take 12 am as the start time of the day)

# tech stack :-
1. prisma orm
2. next js app dir
3. mongo db database
4. use .jsx in entire app


# Data fields:-
1. class:- (classname , starting rollnumber)
2. students - (rollnumber, name, and mark ✅(P - present)	❌ (A- Absent))






----------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------







# Revised Updated Prompt :-

**Project Overview**

We need a full‑stack, Bluetooth‑enabled attendance system consisting of:

1. **Web Application** (Next.js + Prisma ORM + MongoDB)
2. **ESP32 Firmware** (Bluetooth LE GATT server + OLED & button UI)
3. **Sync & Data Persistence** (two‑way Bluetooth sync, MongoDB storage)

---

## 1. Objectives and High‑Level Flow

1. **Class & Student Management** in Web UI
2. **Bluetooth Discovery & Pairing** between browser and ESP32
3. **Data Sync**: Push classes + students to ESP32 (JSON)
4. **On‑Device Attendance**: Take, store, and display attendance
5. **Back to Web**: Pull attendance records, persist in MongoDB
6. **Automatic Cleanup**: Clear marks on ESP32 after successful DB write
7. **Day‑Boundary Lock**: Allow only next‑day attendance after 00:00

---

## 2. Assumptions & Constraints

* **Browser Support**: Chrome‑family (M70+) over HTTPS (Web Bluetooth API)
* **BLE**: ESP32 running NimBLE or Arduino BLE library
* **Security**: TLS for Web App, BLE pairing with passkey
* **Data Volume**: \~100 students per class; memory limits on ESP32
* **Timekeeping**: Server timestamps (no RTC on ESP32)

---

## 3. Data Modeling (Prisma + MongoDB)


model Class {
  id         String    @id @default(uuid())
  name       String
  startRoll  Int       @default(1)
  students   Student[]
  attendance Attendance[]
}

model Student {
  id        String   @id @default(uuid())
  roll      Int
  name      String
  class     Class    @relation(fields: [classId], references: [id])
  classId   String
}

model Attendance {
  id         String   @id @default(uuid())
  class      Class    @relation(fields: [classId], references: [id])
  classId    String
  records    Json     // [{ roll: Int, present: Boolean }]
  takenAt    DateTime @default(now())
}


## 4. Web App: User Stories & API

### 4.1 Class & Student Management

* **Create Class**: name, startRoll
* **List/Edit/Delete Classes**
* **Add Students**: roll = auto‑increment from startRoll; name

### 4.2 Bluetooth Sync

* **Scan & List** BLE devices (filter by ESP32 service UUID)
* **Connect** to selected device
* **Sync Button** (first‑time connect only)

  * Push JSON payload: all classes & student lists
  * Show confirmation & JSON preview

### 4.3 Attendance Retrieval

* **Fetch Storage Info**: used/total bytes from BLE characteristic
* **Download Attendance**: list which classes have data
* **Save to DB**: POST `/api/attendance` with classId + records
* **Clear Marks on ESP32**: BLE write to “clear” characteristic
* **Day‑Lock Enforcement**: disable fetch if already saved today

---

## 5. ESP32 Firmware: User Stories & BLE GATT

### 5.1 BLE GATT Services & Characteristics

* **Service UUID**: `XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX`
* **Char: ClassData (read/write)** – JSON array of classes & students
* **Char: StorageInfo (read)** – `{ used: Int, total: Int }`
* **Char: AttendanceData (read/write/notify)** – per‑class JSON
* **Char: Command (write)** – sync, clear, etc.

### 5.2 OLED & Button UI Flow

1. **Power On** → OLED: “Device ON”
2. **Main Menu**: scroll classes (Up/Down buttons)
3. **Select Class** (Select button)
4. **Attendance Screen**: show `roll`, `name`

   * Buttons: Present (P), Absent (A)
   * Auto‑advance after mark
5. **Completion**: save in Flash → “Attendance saved” → back to menu
6. **Already Taken**: show “Taken” badge; skip
7. **Edge Cases**:

   * Power‑off mid‑session → discard uncommitted
   * User cancel → rollback session

---

## 6. Error Handling & Edge Cases

* **BLE Disconnect Mid‑Sync** → abort + retry prompt
* **Flash Full** → reject new session
* **Duplicate Attendance** → warn + block
* **Date Rollover**: server cron or daily TTL to reset lock

---

## 7. Security & Permissions

* **Authentication**: JWT‑based login for teachers
* **Authorization**: only owners can modify classes
* **BLE Pairing**: passkey or bonding
* **Data Validation**: schema checks on both sides

---

## 8. Tech Stack

* **Front‑end**: Next.js (App Dir), React (JSX), Tailwind CSS
* **API & ORM**: Next.js API routes, Prisma ORM (MongoDB)
* **Database**: MongoDB Atlas
* **Firmware**: ESP-IDF or Arduino + NimBLE
* **CI/CD**: GitHub Actions for lint, build, deploy

---

## 9. Phased Delivery

1. **Phase 1**: Web CRUD + mock BLE sync
2. **Phase 2**: BLE service on ESP32 + browser pairing
3. **Phase 3**: Full JSON sync end‑to‑end
4. **Phase 4**: Attendance retrieval + DB persistence
5. **Phase 5**: Cleanup, lock‑down, and polish UX

---

## 10. Acceptance Criteria

* ✅ CRUD Web UI with class & student lists
* ✅ Browser can pair & write class/student JSON to ESP32
* ✅ ESP32 UI lets user take & store attendance
* ✅ Web app can read back attendance & persist in MongoDB
* ✅ Marks on ESP32 cleared post‑save
* ✅ No duplicate attendance within same UTC day





-----------------------------------------------------------------------------------------------------------------------------------



